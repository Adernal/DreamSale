{"version":3,"sources":["/home/elliot/Projects/Freelance/DS/src/app/layout/orders/filter.pipe.ts","/home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders-routing.module.ts","/home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.component.html","/home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.component.scss","/home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.component.ts","/home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.module.ts","/home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.service.ts","/home/elliot/Projects/Freelance/DS/~/ngx-pagination/dist/ngx-pagination.js?e65f*"],"names":[],"mappings":"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CA;AACA;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,2CAA2C;AAC3C,KAAK,2BAA2B;AAChC,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oqBAAoqB,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,0RAA0R,yBAAyB,kCAAkC,cAAc,oIAAoI,4BAA4B,kCAAkC,cAAc,qSAAqS,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AAC98D,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,sCAAsC,wBAAwB,kCAAkC,qBAAqB,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE;;AAEjrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,0DAA0D,WAAW;AACrE;AACA,YAAY,6DAAc;AAC1B,iBAAiB,6DAAc;AAC/B,wBAAwB,6DAAc;AACtC,kBAAkB,6DAAc;AAChC,uBAAuB,6DAAc;AACrC,mBAAmB,6DAAc;AACjC,qCAAqC,6DAAc;AACnD,+BAA+B,6DAAc;AAC7C,kCAAkC,6DAAc;AAChD,oBAAoB,8DAAe;AACnaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,0DAA0D;AAC1D,KAAK,2BAA2B;AAChC,KAAK,0EAA2B;AAChC,EAAE;AACF;AACA,YAAY,6DAAc;AAC1B,iBAAiB,6DAAc;AAC/B,oBAAoB,8DAAe;AACnC;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,kDAAkD,WAAW;;AAE7D;AACA;AACA;;AAEQ","file":"6.chunk.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return null;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/elliot/Projects/Freelance/DS/src/app/layout/orders/filter.pipe.ts","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OrdersComponent } from './orders.component';\n\n\nconst routes: Routes = [\n    { path: '', component: OrdersComponent },\n\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class OrdersRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// /home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders-routing.module.ts","module.exports = \"<div class=\\\"container\\\">\\n<h1> Order Management </h1>\\n     <hr>\\n    <div class=\\\"row\\\" *ngIf=\\\"editMode\\\">\\n      <div class=\\\"col-lg-6\\\" style=\\\"float: none; margin: 0 auto;\\\">\\n        <fieldset class=\\\"form-group card mb-3\\\">\\n                  <label class=\\\"card-header\\\">Order Status</label>\\n                  <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{OrderStatus}}</p>\\n                  <!-- <select name=\\\"OrderStatus\\\" (change)=\\\"changeOrderStatus()\\\">\\n                      <<option value=\\\"\\\">Completed</option>\\n                      <option value=\\\"\\\">Processed</option>\\n                  </select> -->\\n        </fieldset>\\n\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Shipping Status</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{ShippingStatus}}</p>\\n          </fieldset>\\n\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Payment Status</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{PaymentStatus}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Order Total</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{OrderTotal}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Customer Full Name</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{CustomerFullName}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Customer Email</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{CustomerEmail}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Customer Ip</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{CustomerIp}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Store Name</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{StoreName}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Shipping Address</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{ShippingAddress}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Billing Address</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{BillingAddress}}</p>\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Items</label>\\n                    <ul style=\\\"list-style:none\\\">\\n                      <li *ngFor=\\\"let item of Items\\\">\\n                        <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{item}}</p>\\n                      </li>\\n                    </ul>\\n\\n          </fieldset>\\n          <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Created On</label>\\n                    <p class=\\\"card-text\\\" style=\\\"text-align:center\\\">{{CreatedOn}}</p>\\n          </fieldset>\\n          <button class=\\\"btn btn-success\\\" (click)=\\\"showSearch()\\\">Search Form</button>\\n\\n      </div>\\n    </div>\\n\\n\\n\\n    <div class=\\\"row\\\" *ngIf=\\\"searchMode\\\">\\n      <div class=\\\"col-lg-6\\\" style=\\\"float: none; margin: 0 auto;\\\">\\n\\n            <form role=\\\"form\\\" (ngSubmit)=\\\"searchOrder(s)\\\" #s=\\\"ngForm\\\">\\n\\n\\n\\n                <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Billing Last Name</label>\\n                    <input class=\\\"form-control\\\" ngModel name=\\\"BillingLastName\\\" placeholder=\\\"Billing Last Name\\\">\\n                </fieldset>\\n                <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Billing Email</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" ngModel name=\\\"BillingEmail\\\"  placeholder=\\\"Enter Customer Email\\\" >\\n                </fieldset>\\n                <!-- <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Store</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" ngModel name=\\\"StoreName\\\"  placeholder=\\\"Enter Store Name\\\" >\\n\\n                </fieldset> -->\\n                <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Order Status</label>\\n                    <select class=\\\"form-control\\\" ngModel name=\\\"OrderStatus\\\">\\n                          <option value=\\\"10\\\">Pending</option>\\n                          <option value=\\\"20\\\">Processing </option>\\n                          <option value=\\\"30\\\">Complete</option>\\n                          <option value=\\\"40\\\">Cancelled</option>\\n\\n                                    </select>\\n                </fieldset>\\n                <!-- <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Shipping Status</label>\\n                    <input type=\\\"number\\\" class=\\\"form-control\\\" ngModel name=\\\"StockQuantity\\\" >\\n                </fieldset> -->\\n\\n\\n\\n\\n\\n\\n\\n                <fieldset class=\\\"form-group card mb-3\\\">\\n                    <label class=\\\"card-header\\\">Payment Status</label>\\n                    <select class=\\\"form-control\\\" ngModel name=\\\"PaymentStatus\\\">\\n                          <option value=\\\"10\\\">Pending</option>\\n                          <option value=\\\"20\\\">Authorized</option>\\n                          <option value=\\\"30\\\">Paid</option>\\n                          <option value=\\\"35\\\">Partially Refunded</option>\\n                          <option value=\\\"40\\\">Refunded</option>\\n                          <option value=\\\"50\\\">Voided</option>\\n                        </select>\\n                </fieldset>\\n                <img [src]=\\\"loadingImagePath\\\" *ngIf=\\\"loadingOrder\\\" alt=\\\"\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"!s.valid\\\" >Search Order</button>\\n\\n\\n\\n\\n            </form>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"showAllOrders\\\">\\n        <div class=\\\"card mb-3\\\">\\n                <div class=\\\"card-header\\\">\\n                  <h2>Order</h2>\\n                </div>\\n                <div class=\\\"card-block\\\" style=\\\"width:100%;\\\">\\n                    <table class=\\\"table table-bordered\\\" style=\\\"table-layout:fixed\\\">\\n                        <thead class=\\\"thead-inverse\\\">\\n                        <tr>\\n\\n                            <th>Order Status</th>\\n                            <th>Payment Status</th>\\n                            <th>Shipping Status</th>\\n                            <th>Customer</th>\\n                            <th>Created On</th>\\n                            <th>Total</th>\\n                            <th>Action</th>\\n\\n\\n\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor =\\\"let order of orderList | paginate: { id:'Orders', itemsPerPage: 10, currentPage: currentPageNumber , totalItems: totalOrders}\\\">\\n                          <td>{{order.OrderStatus}}</td>\\n                          <td>{{order.PaymentStatus}}</td>\\n                          <td>{{order.ShippingStatus}}</td>\\n                          <td>{{order.CustomerFullName}}</td>\\n                          <td>{{order.CreatedOn}}</td>\\n                          <td>{{order.OrderTotal}}</td>\\n                          <td><button type=\\\"button\\\" name=\\\"{{order.Id}}\\\" class=\\\"btn btn-primary\\\" (click)=\\\"editOrderMode(c)\\\" #c><i class=\\\"fa fa-edit\\\"></i></button></td>\\n                        </tr>\\n\\n\\n                        </tbody>\\n                    </table>\\n                    <img [src]=\\\"loadingImagePath\\\" *ngIf=\\\"loadingOrder\\\" alt=\\\"\\\">\\n                    <pagination-controls (pageChange)=\\\"getOrders($event)\\\" id=\\\"Orders\\\"></pagination-controls>\\n                </div>\\n            </div>\\n\\n\\n\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"searchList\\\">\\n        <div class=\\\"card mb-3\\\">\\n                <div class=\\\"card-header\\\">\\n                  <h2>Order</h2>\\n                  <button (click)=\\\"showAllOrders()\\\" class=\\\"btn btn-primary\\\">Show All Orders </button>\\n                </div>\\n                <div class=\\\"card-block\\\" style=\\\"width:100%;\\\">\\n                    <table class=\\\"table table-bordered\\\" style=\\\"table-layout:fixed\\\">\\n                        <thead class=\\\"thead-inverse\\\">\\n                        <tr>\\n\\n                            <th>Order Status</th>\\n                            <th>Payment Status</th>\\n                            <th>Shipping Status</th>\\n                            <th>Customer</th>\\n                            <th>Created On</th>\\n                            <th>Total</th>\\n                            <th>Action</th>\\n\\n\\n\\n                        </tr>\\n                        </thead>\\n                        <tbody>\\n                        <tr *ngFor =\\\"let order of searchedOrders | paginate: { id:'SearchedOrders', itemsPerPage: 10, currentPage: currentPageNumber , totalItems: totalOrders}\\\">\\n                          <td>{{order.OrderStatus}}</td>\\n                          <td>{{order.PaymentStatus}}</td>\\n                          <td>{{order.ShippingStatus}}</td>\\n                          <td>{{order.CustomerFullName}}</td>\\n                          <td>{{order.CreatedOn}}</td>\\n                          <td>{{order.OrderTotal}}</td>\\n                          <td><button type=\\\"button\\\" name=\\\"{{order.Id}}\\\" class=\\\"btn btn-primary\\\" (click)=\\\"editOrderMode(c)\\\" #c><i class=\\\"fa fa-edit\\\"></i></button></td>\\n                        </tr>\\n\\n\\n                        </tbody>\\n                    </table>\\n                    <img [src]=\\\"loadingImagePath\\\" *ngIf=\\\"loadingOrder\\\" alt=\\\"\\\">\\n                    <pagination-controls (pageChange)=\\\"searchOrder($event)\\\" id=\\\"SearchedOrders\\\"></pagination-controls>\\n                </div>\\n            </div>\\n\\n\\n\\n    </div>\\n  </div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.component.html\n// module id = ../../../../../src/app/layout/orders/orders.component.html\n// module chunks = 6","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.component.scss\n// module id = ../../../../../src/app/layout/orders/orders.component.scss\n// module chunks = 6","import { Component, OnInit , ViewChild } from '@angular/core';\nimport { NgForm  } from '@angular/forms';\nimport { Http } from '@angular/http';\nimport { OrderService } from './orders.service';\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.component.html',\n  styleUrls: ['./orders.component.scss']\n})\nexport class OrdersComponent implements OnInit {\n  currentPageNumber:number;\n  @ViewChild('f') ordersForm: NgForm;\n  @ViewChild('s') searchForm: NgForm;\n  totalOrders:number;\n  OrderId:number;\n  loadingOrder:boolean;\n  orderList=[];\n  editMode:boolean;\n  StoreName='';\n  BillingEmail='';\n  BillingLastName='';\n  CustomerIp='';\n  OrderTotal='';\n  OrderStatus='';\n  PaymentStatus='';\n  ShippingStatus='';\n  ShippingAddress='';\n  BillingAddress='';\n  Items=[];\n  CreatedOn='';\n  loadingImagePath:string;\n  searchMode:boolean;\n  searchedOrders=[];\n  showAllOrders:boolean;\n  searchList:boolean;\n  searchParameters=[];\n  CustomerFullName='';\n  CustomerEmail='';\n\n  order;\n  orderDetails=[];\n  constructor(private http:Http,private ordersService:OrderService) {\n  this.loadingOrder=false;\n  this.totalOrders=25878;\n  this.currentPageNumber=1;\n  this.OrderId=0;\n  this.editMode=false;\n  this.loadingImagePath='../../assets/images/ajax-loader.gif';\n  this.searchMode=true;\n  this.showAllOrders=true;\n  this.searchList=false;\n\n}\n\n  ngOnInit() {\n    this.getOrders(1);\n  }\n  getOrders(page:number){\n    this.loadingOrder=true;\n    this.editMode=false;\n\n    this.ordersService.getOrders(page-1)\n        .subscribe(\n        (response) => {\n            this.loadingOrder=false;\n            this.currentPageNumber=page;\n\n\n            this.orderList = (response.json().Data);\n\n        },\n        (error) =>      {\n                console.log(error);\n                alert(\"Can't fetch data ! Please refresh or check your connnection !\");\n              }\n        );\n\n  }\n  editOrderMode(id:HTMLFormElement){\n    this.editMode=true;\n    this.searchMode =false;\n    this.OrderId =+id.name;\n    this.order = this.getCurrentOrder(this.OrderId)[0];\n    this.StoreName = this.order[\"StoreName\"];\n    this.CustomerEmail = this.order[\"CustomerEmail\"];\n    this.CustomerFullName=this.order[\"CustomerFullName\"];\n    this.CustomerIp=this.order[\"CustomerIp\"];\n    this.OrderTotal=this.order[\"OrderTotal\"];\n    this.OrderStatus = this.order[\"OrderStatus\"];\n    this.PaymentStatus = this.order[\"PaymentStatus\"];\n    this.ShippingStatus = this.order[\"ShippingStatus\"];\n    this.ShippingAddress = this.order[\"ShippingAddress\"];\n    this.BillingAddress = this.order[\"BillingAddress\"];\n    this.Items = this.order[\"Items\"];\n    this.CreatedOn = this.order[\"CreatedOn\"];\n\n  }\n  getCurrentOrder(id:number){\n    return this.orderList.filter(\n      function(order){ return order.Id == id }\n  );\n  }\nchangeOrderStatus(){\n  alert(\"Hi\");\n}\nshowSearch(){\n  this.editMode=false;\n  this.searchMode=true;\n}\nshowAllProducts(){\n  this.showAllOrders=true;\n  this.searchList = false;\n}\nsearchOrder(page:number){\n  this.loadingOrder=true;\n  this.order=[];\n  this.BillingLastName = this.searchForm.value.BillingLastName;\n  this.BillingEmail = this.searchForm.value.BillingEmail;\n  //this.StoreName = this.searchForm.value.StoreName;\n  this.OrderStatus = this.searchForm.value.OrderStatus;\n  this.PaymentStatus = this.searchForm.value.PaymentStatus;\n  this.searchParameters.push({\n    \"BillingLastName\":this.BillingLastName,\n    \"BillingEmail\":this.BillingEmail,\n    //\"StoreName\":this.StoreName,\n    \"OrderStatusIds\":[+this.OrderStatus],\n    \"PaymentStatusIds\":[+this.PaymentStatus]\n  });\n  this.ordersService.searchOrders((this.searchParameters),page-1)\n      .subscribe(\n      (response) => {\n          this.loadingOrder=false;\n          this.showAllOrders=false;\n          this.searchList=true;\n          this.searchedOrders = (response.json().Data);\n          console.log(this.searchedOrders);\n\n      },\n      (error) =>      {\n              console.log(error);\n              alert(\"Can't fetch data ! Please refresh or check your connnection !\");\n            }\n      );\n\n}\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OrdersRoutingModule } from './orders-routing.module';\nimport { OrdersComponent } from './orders.component';\nimport { PageHeaderModule } from './../../shared';\nimport { FormsModule } from '@angular/forms';\nimport { FilterPipe } from './filter.pipe';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { OrderService } from './orders.service';\n//import { FilterPipe } from './filter.pipe';\n// import { ImageUploadModule } from '../../../../node_modules/angular2-image-upload/src/image-upload.module';\n//import { customerservice } from './product.service';\n\n// import { ProductAttributesComponent } from './product-attributes/product-attributes.component';\n// import { SpecificationAttributesComponent } from './specification-attributes/specification-attributes.component';\n// import { ProductTagsModule } from './product-tags/product-tags.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OrdersRoutingModule,\n    PageHeaderModule,\n    FormsModule,\n    NgxPaginationModule\n    // ImageUploadModule.forRoot()\n    // ProductTagsModule\n  ],\n  providers:[OrderService],\n  declarations: [OrdersComponent, FilterPipe]\n})\nexport class OrdersModule { }\n\n\n\n// WEBPACK FOOTER //\n// /home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.module.ts","import { Injectable } from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\n@Injectable()\nexport class OrderService {\n    temp: {};\n    constructor(private http: Http) { }\n//     storeOrder(customer_role) {\n//         const headers = new Headers({ 'Content-Type': 'application/json' });\n//         this.temp = customer_role[customer_role.length-1];\n//         return this.http.post('http://piyushdaftary-001-site1.ctempurl.com/api/Customers/AddOrder?continueEditing=true', this.temp,\n//             { headers: headers });\n// }\n    getOrders(page:number) {\n        const headers = new Headers({ 'Content-Type': 'application/json' });\n        return this.http.post('http://piyushdaftary-001-site1.ctempurl.com/api/Orders/OrderList?pageIndex='+page+'&pageSize=10',{},{headers:headers});\n    }\n    searchOrders(order,page:number) {\n        const headers = new Headers({ 'Content-Type': 'application/json' });\n        console.log(order[0]);\n        return this.http.post('http://piyushdaftary-001-site1.ctempurl.com/api/Orders/OrderList?pageIndex='+page+'&pageSize=10',order[0],{headers:headers});\n    }\n    updateOrder(customer_role, id) {\n        const headers = new Headers({ 'Content-Type': 'application/json' });\n        console.log(customer_role);\n        return this.http.post('http://piyushdaftary-001-site1.ctempurl.com/api/Customers/EditOrder', customer_role[id], { headers: headers });\n    }\n    deleteOrder(id) {\n        const headers = new Headers({ 'Content-Type': 'application/json' });\n        console.log(\"Id = \" + id);\n        //console.log(customer_role);\n        return this.http.post('http://piyushdaftary-001-site1.ctempurl.com/api/Customers/DeleteOrder?id='+id, null, { headers: headers });\n    }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/elliot/Projects/Freelance/DS/src/app/layout/orders/orders.service.ts","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (!instance.id) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        }\r\n        else {\r\n            var changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (args instanceof Array) {\r\n            // compatible with angular2 before beta16\r\n            args = args[0];\r\n        }\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId;\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, args) {\r\n        var config = args;\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id || this.service.defaultId(),\r\n            itemsPerPage: config.itemsPerPage || 0,\r\n            currentPage: config.currentPage || 1,\r\n            totalItems: config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    return PaginatePipe;\r\n}());\r\nPaginatePipe.decorators = [\r\n    { type: Pipe, args: [{\r\n                name: 'paginate',\r\n                pure: false\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nPaginatePipe.ctorParameters = function () { return [\r\n    { type: PaginationService, },\r\n]; };\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */ var DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a *ngIf=\\\"1 < p.getCurrent()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" *ngFor=\\\"let page of p.pages\\\">\\n            <a (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ page.label }}</span>\\n            </a>\\n            <div *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ page.label }}</span> \\n            </div>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a *ngIf=\\\"!p.isLastPage()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination .ellipsis::after {\\n    content: '\\u2026';\\n    padding: 0.1875rem 0.625rem;\\n    color: #0a0a0a; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\";\n\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = !!value && value !== 'false';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = !!value && value !== 'false';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PaginationControlsComponent;\r\n}());\r\nPaginationControlsComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'pagination-controls',\r\n                template: DEFAULT_TEMPLATE,\r\n                styles: [DEFAULT_STYLES],\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nPaginationControlsComponent.ctorParameters = function () { return []; };\r\nPaginationControlsComponent.propDecorators = {\r\n    'id': [{ type: Input },],\r\n    'maxSize': [{ type: Input },],\r\n    'directionLinks': [{ type: Input },],\r\n    'autoHide': [{ type: Input },],\r\n    'previousLabel': [{ type: Input },],\r\n    'nextLabel': [{ type: Input },],\r\n    'screenReaderPaginationLabel': [{ type: Input },],\r\n    'screenReaderPageLabel': [{ type: Input },],\r\n    'screenReaderCurrentLabel': [{ type: Input },],\r\n    'pageChange': [{ type: Output },],\r\n};\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (!this.service.getInstance(this.id).id) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.setCurrent(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    return PaginationControlsDirective;\r\n}());\r\nPaginationControlsDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'pagination-template,[pagination-template]',\r\n                exportAs: 'paginationApi'\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nPaginationControlsDirective.ctorParameters = function () { return [\r\n    { type: PaginationService, },\r\n    { type: ChangeDetectorRef, },\r\n]; };\r\nPaginationControlsDirective.propDecorators = {\r\n    'id': [{ type: Input },],\r\n    'maxSize': [{ type: Input },],\r\n    'pageChange': [{ type: Output },],\r\n};\n\nvar NgxPaginationModule = (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    return NgxPaginationModule;\r\n}());\r\nNgxPaginationModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule],\r\n                declarations: [\r\n                    PaginatePipe,\r\n                    PaginationControlsComponent,\r\n                    PaginationControlsDirective\r\n                ],\r\n                providers: [PaginationService],\r\n                exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nNgxPaginationModule.ctorParameters = function () { return []; };\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/elliot/Projects/Freelance/DS/~/ngx-pagination/dist/ngx-pagination.js\n// module id = ../../../../ngx-pagination/dist/ngx-pagination.js\n// module chunks = 4 5 6 7 8 9 13 15"],"sourceRoot":"webpack:///"}